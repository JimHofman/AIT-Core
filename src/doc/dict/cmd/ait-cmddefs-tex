#!/usr/bin/env python

"""
AIT Command Definitions to TeX

Outputs AIT Command Definitions in TeX format.
"""

"""
Authors: Ben Bornstein

Copyright 2016 California Institute of Technology.  ALL RIGHTS RESERVED.
U.S. Government Sponsorship acknowledged.
"""

from ait.core import cmd

import ait

titles = {
  'ANALOGS': 'Analogs',
  'CMD'    : 'Commands and Sequences',
  'CORE'    : 'C\&DH Core',
  'CRYO': 'Cryocooler',
  'DCC'      : 'Digital Context Camera System',
  'ETHERNET'    : 'Ethernet',
  'FP'   : 'Fault Protection',
  'GPS' : 'Global Positioning System',
  'IMU' : 'Inertial Measurement Unit',
  'PCS' : 'Pointing Control System',
  'PMA' : 'Pointing Mirror Assembly',
  'REM' : 'Instrument Remote Electronics Module',
  'SRU' : 'Stellar Reference Unit',
  'TEMPCTL' : 'Temperature Control'
}

#titles = {
#  'CMD'     : 'Commands and Sequences',
#  'CORE'    : 'C\&DH Core',
#  'CRYO'    : 'Cryocooler',
#  'ETHERNET': 'Ethernet',
#  'FP'      : 'Fault Protection',
#  'FPIE'    : 'Focal Plane Interface Electronics',
#  'MOTOR'   : 'Motor Control',
#  'TEMPCTL' : 'Temperature Control'
#}

def argvalues (arg):
  """Returns either a value range or enumeration for the given ArgDefn."""
  result = ''

  if arg.enum:
    options = [ ]
    names   = arg.enum.keys()
    names.sort(key=lambda n: arg.enum[n])

    for name in names:
      value = arg.enum[name]
      options.append('\\argenum{%d}{%s}' % (value, name))
    result = ' \\newline '.join(options)

  elif arg.type:
    if arg.type.float:
      result = '[%g, %g]' % (arg.type.min, arg.type.max)
    else:
      result = '[%s, %s]' % (str(arg.type.min), str(arg.type.max))

  return result


def argtype (arg):
  """Returns a string indicating the type of the given ArgDefn."""
  result = ''
  if arg.type:
    result = arg.type.name

  return result


def sanitize (s):
  """Returns a santized string with special TeX characters escaped."""
  s = s.replace('&', '\&')
  s = s.replace('<', '{\\textless}')
  s = s.replace('>', '{\\textgreater}')
  s = s.replace('^', '{\\textasciicircum}')
  return s


def varargs (argdefns):
  """Returns a list of ArgDefns with Fixed (constant) arguments removed."""
  result = [ ]
  if argdefns is not None:
    result = filter(lambda arg: not arg.fixed, argdefns)
  return result


def writeSection (output, title, commands):
  """Outputs a section of the command dictionary."""
  output.write('\\section{%s}\n\n' % title)

  for cmd in commands:
    writeCommand(output, cmd)
    output.write('\n')


def writeCommand (output, cmd):
  """Outputs a subsection for the given command."""
  print cmd.name
  output.write('\\subsection{%s}\n' % cmd.title)
  output.write('\n')
  output.write('%s\n' % sanitize(cmd.desc).strip())
  output.write('\n')

  args = varargs(cmd.argdefns)

  output.write('\\begin{cmdusage}{%s}\n' % cmd.name)
  for arg in varargs(args):
    output.write('  \\cmdarg{%s} \:\n' % arg.name)
  output.write('\\end{cmdusage}\n')
  output.write('\n')

  if len(args) > 0:
    output.write('\\begin{argdesc}\n')
    for arg in args:
      values = arg.name, sanitize(arg.desc)
      output.write('  \\cmdarg{%s} & %s\\\\\n' % values)
    output.write('\\end{argdesc}\n')
    output.write('\n')

    output.write('\\begin{argdetails}\n')
    for arg in args:
      values = arg.name, argtype(arg), argvalues(arg), sanitize(arg.units)
      output.write('  \\cmdarg{%s} & %s & %s & %s\\\\\n' % values)
      output.write('  \\hline\n')
    output.write('\\end{argdetails}\n')
    output.write('\n')

  output.write('\\clearpage\n')
  output.write('\n')
  output.write('% ' + ('-' * 65) + '\n')

filename = 'cmddict-07-cmddefs.tex'
output   = open(filename, 'wt')

for section in sorted( titles.keys() ):
  commands = [ ]
  for c in cmd.getDefaultDict().values():
    if c.subsystem == section:
      commands.append(c)
  commands.sort(key=lambda c: c.name)
  print commands
  writeSection(output, titles[section], commands)

output.close()
